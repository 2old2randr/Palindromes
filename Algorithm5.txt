@ Algorithm applied to 'special' numbers -- in turn calls either
@ Algorithm-2 or Algorithm-4
@ number | palindrome-1 --> palindrome-1 | palindrome-2 | palindrome-3
\<< 1 \-> num p1 mult
    \<< p1 SIZE 2 / IP R\->I \-> m
        \<< 10 m ^ 10 m 1 - ^ + DUP
            num SWAP - I\->NL REVLIST \-> s d
            \<< IF d m 1 + GET 0 \=/ d m GET 0 \=/ AND NOT THEN
                    'mult' INCR DROP
                    num s 2 * - I\->NL
                ELSE
                    d REVLIST
                END
                NTYPE \-> type special d p1 p2 p3
                \<< CASE
                        p1 SIZE 2 MOD THEN
                            @ We need to change p1 p2 p3 as if
                            @ the number was classified as B1/B2
                            d REVLIST DUP SIZE \-> d n
                            \<< d 2 GET d 3 GET d n GET
                                n ZEROLST 3 NDUPN DROP
                                \-> d2 d3 dn p1 p2 p3
                                \<< IF dn d3 - 10 MOD THEN
                                        @ Use B1 setup
                                        d2 DUP
                                        p1 1 1 PUT n 1 PUT 2 ROT PUT n 1 - ROT PUT 'p1' STO
                                        d3 1 - DUP
                                        p2 3 ROT PUT n ROT PUT 'p2' STO
                                        dn d3 - 10 MOD DUP
                                        p3 4 ROT PUT n ROT PUT 'p3' STO
                                    ELSE
                                        @ Use B2 setup
                                        d2 DUP
                                        p1 1 1 PUT n 1 PUT 2 ROT PUT n
                                        1 - ROT PUT 'p1' STO
                                        d3 2 - DUP
                                        p2 3 ROT PUT n ROT PUT 'p2'
                                        STO
                                        p3 4 1 PUT n 1 PUT 'p3' STO
                                    END
                                    p1 CMPLST 'p1' STO
                                    p2 CMPLST 'p2' STO
                                    p3 CMPLST 'p3' STO
                                    d REVLIST p1 p2 p3 ALGO4
                                \>>
                            \>>
                        END
                        type 1 1 SUB "A" == THEN
                            d p1 p2 p3 ALGO2
                        END
                        d p1 p2 p3 ALGO4
                    END
                \>>
                ROT s mult * + UNROT
            \>>
        \>>
    \>>
\>>
'ALGO5' STO
