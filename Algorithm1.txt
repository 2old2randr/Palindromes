@ Algorithm applied to numbers of type 'A1'-'A4' with an odd number of
@ digits or 'A5'-'A6' with an even number of digits
@ Inputs on stack are lists of digits of the number (lsb first)
@ and starting guesses for the palindromes
@ digits | p1 | p2 | p3 --> palindrome-1 | palindrome-2 | palindrome-3
\<< \-> d p1 p2 p3
    \<< p1 SIZE ZEROLST    @ carry list
        p1 SIZE 2 / IP     @ half list len
        p1 SIZE
        p2 SIZE
        p3 SIZE
        p1 1 GET           @ temp vars to avoid repeated GETs
        p2 1 GET
        p3 1 GET
        0 0 0
        \-> c m l1 l2 l3 x y z d1 d2 ci
        \<< x y + z + 10 / IP 'ci' STO
            c 1 ci PUT 'c' STO   @ carry from column 1
            d 2 m * 1 - GET 'd1' STO
            d 2 m * GET 'd2' STO
            IF z d1 < THEN
                d2 y - 10 MOD 'x' STO
            ELSE
                d2 y - 1 - 10 MOD 'x' STO
            END
            p1 2 x PUT 'p1' STO
            p1 l1 1 - x PUT 'p1' STO         @ mirror
            d1 z - 1 - 10 MOD 'y' STO
            p2 2 y PUT 'p2' STO
            p2 l2 1 - y PUT 'p2' STO
            d 2 GET x - y - ci - 10 MOD 'z' STO
            p3 2 z PUT 'p3' STO
            p3 l3 1 - z PUT 'p3' STO
            x y + z + ci + d 2 GET - 10 / IP 'ci' STO
            c 2 ci PUT 'c' STO
            IF m 3 \>= THEN
                3 m FOR i
                    d 2 m * i - 1 + GET 'd1' STO
                    d i GET 'd2' STO
                    IF z d1 < THEN
                        1 'x' STO
                    ELSE
                        0 'x' STO
                    END
                    p1 i x PUT 'p1' STO
                    p1 l1 i - 1 + x PUT 'p1' STO
                    d1 z - 1 - 10 MOD 'y' STO
                    p2 i y PUT 'p2' STO
                    p2 l2 i - 1 + y PUT 'p2' STO
                    d2 x - y - ci - 10 MOD 'z' STO
                    p3 i z PUT 'p3' STO
                    p3 l3 i - 1 + z PUT 'p3' STO
                    x y + z + ci + d2 - 10 / IP 'ci' STO
                    c i ci PUT 'c' STO
                NEXT
            END
            p1 m 1 + 0 PUT 'p1' STO
            @ adjust if carry in posn m is 0/2
            IF c m GET 0 == THEN             @ I.2
                p1 m 1 + 1 PUT 'p1' STO
            ELSE IF c m GET 2 == THEN        @ I.3
                p1 m 1 + 1 PUT 'p1' STO
                p2 m 1 + GET 1 - 'y' STO
                p2 m 1 + y PUT 'p2' STO
                p2 m y PUT 'p2' STO
            END END
            p1 NL\->I p2 NL\->I p3 NL\->I
        \>>
    \>>
\>>
'ALGO1' STO
