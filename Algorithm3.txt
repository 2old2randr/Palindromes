@ Algorithm applied to numbers of type 'B' with an odd number of digits
@ Inputs on stack are lists of digits of the number (lsb first)
@ and starting guesses for the palindromes
@ digits | p1 | p2 | p3 --> palindrome-1 | palindrome-2 | palindrome-3
\<< \-> d p1 p2 p3
    \<< p1 SIZE DUPDUP
        2 / IP             @ list midpoint
        SWAP ZEROLST       @ carry list
        p2 SIZE
        p3 SIZE
        p1 1 GET
        p2 1 GET
        p3 1 GET
        0 0 0
        \-> l1 m c l2 l3 x y z d1 d2 ci
        \<< x y + z + 10 / IP DUP 'ci' STO
            'c' 1 ROT PUT
            2 m * DUP
            d SWAP 2 - GET 'd1' STO
            d SWAP 1 - GET 'd2' STO
            IF z d1 < THEN d2 y - ELSE d2 y - 1 - END 10 MOD DUPDUP 'x' STO
            @ p1 has two digits populated (both 1) so
            @ the subscript is 1 more than the one for p2 and p3
            p1 3 ROT PUT l1 2 - ROT PUT 'p1' STO
            d1 z - 1 - 10 MOD DUPDUP 'y' STO
            p2 2 ROT PUT l2 1 - ROT PUT 'p2' STO
            d 2 GET p1 2 GET - y - ci - 10 MOD DUPDUP 'z' STO
            p3 2 ROT PUT l3 1 - ROT PUT 'p3' STO
            p1 2 GET y + z + ci + 10 / IP DUP 'ci' STO
            'c' 2 ROT PUT
            IF m 3 > THEN
                3 m 1 -
                FOR i
                    d 2 m * i - GET 'd1' STO
                    IF z d1 < THEN 1 ELSE 0 END DUPDUP 'x' STO
                    p1 i 1 + ROT PUT l1 i - ROT PUT 'p1' STO
                    d1 z - 1 - 10 MOD DUPDUP 'y' STO
                    p2 i ROT PUT l2 i - 1 + ROT PUT 'p2' STO
                    d i GET p1 i GET - y - ci - 10 MOD DUPDUP 'z' STO
                    p3 i ROT PUT l3 i - 1 + ROT PUT 'p3' STO
                    p1 i GET y + z + ci + 10 / IP DUP 'ci' STO
                    'c' i ROT PUT
                NEXT
            END
            'p1' m 1 + 0 PUT
            d m GET z - x - ci - 10 MOD DUP 'y' STO
            'p2' m ROT PUT
            @ Adjust if carry in m is 0 or 2
            x y + z + ci + 10 / IP 'ci' STO
            IF ci 0 == THEN                          @ III.2
                'p1' m 1 + 1 PUT
            ELSE IF ci 2 == THEN
                p2 m 1 - GET 'y' STO
                p3 m 1 - GET 'z' STO
                IF y 0 \=/ z 9 \=/ AND THEN          @ III.3.i
                    'y' DECR DUP
                    p2 m 1 - ROT PUT m 1 + ROT PUT 'p2' STO
                    p2 m GET 1 - 'p2' m ROT PUT
                    'z' INCR DUP
                    p3 m 1 - ROT PUT m ROT PUT 'p3' STO
                ELSE IF y 0 \=/ z 9 == AND THEN     @ III.3.ii
                    'p1' m 1 + 1 PUT
                    'y' DECR DUP
                    p2 m 1 - ROT PUT m 1 + ROT PUT 'p2' STO
                    p3 m 0 PUT m 1 - 0 PUT 'p3' STO
                ELSE IF y 0 == z 9 \=/ AND THEN     @ III.3.iii
                    p1 m GET 1 - DUP
                    p1 m ROT PUT m 2 + ROT PUT 'p1' STO
                    p2 m p2 m GET 1 - PUT m 1 - 9 PUT m 1 + 9 PUT 'p2' STO
                    'z' INCR DUP
                    p3 m 1 - ROT PUT m ROT PUT 'p3' STO
                ELSE                               @ III.3.iv
                    p1 m GET 1 - DUP
                    p1 m ROT PUT m 2 + ROT PUT m 1 + 1 PUT 'p1' STO
                    p2 m 1 - 9 PUT m 1 + 9 PUT 'p2' STO
                    p3 m 1 - 0 PUT m 0 PUT 'p3' STO
                END END END
            END END
            p1 NL\->I p2 NL\->I p3 NL\->I
        \>>
    \>>
\>>
'ALGO3' STO
