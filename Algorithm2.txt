@ Algorithm applied to normal numbers of type 'A' with an even number of digits
@ Inputs on stack are lists of digits of the number (lsb first)
@ and starting guesses for the palindromes
@ digits | p1 | p2 | p3 --> palindrome-1 | palindrome-2 | palindrome-3
\<< \-> d p1 p2 p3
    \<< p1 SIZE DUPDUP
        2 / IP             @ list midpoint
        SWAP ZEROLST       @ carry list
        p2 SIZE
        p3 SIZE
        p1 1 GET
        p2 1 GET
        p3 1 GET
        0 0 0
        \-> l1 m c l2 l3 x y z d1 d2 ci
        \<< x y + z + 10 / IP DUP 'ci' STO
            'c' 1 ROT PUT
            2 m * DUP
            d SWAP 2 - GET 'd1' STO
            d SWAP 1 - GET 'd2' STO
            d2 y - IF z d1 \>= THEN 1 - END 10 MOD DUPDUP 'x' STO
            p1 2 ROT PUT l1 1 - ROT PUT 'p1' STO
            d1 z - 1 - 10 MOD DUPDUP 'y' STO
            p2 2 ROT PUT l2 1 - ROT PUT 'p2' STO
            d 2 GET x - y - ci - 10 MOD DUPDUP 'z' STO
            p3 2 ROT PUT l3 1 - ROT PUT 'p3' STO
            x y + z + ci + 10 / IP DUP 'ci' STO
            'c' 2 ROT PUT
            IF m 3 > THEN
                3 m 1 -
                FOR i
                    d 2 m * i - GET 'd1' STO
                    z d1 < 1 0 IFTE DUPDUP 'x' STO
                    p1 i ROT PUT l1 i - 1 + ROT PUT 'p1' STO
                    d1 z - 1 - 10 MOD DUPDUP 'y' STO
                    p2 i ROT PUT l2 i - 1 + ROT PUT 'p2' STO
                    d i GET x - y - ci - 10 MOD DUPDUP 'z' STO
                    p3 i ROT PUT l3 i - 1 + ROT PUT 'p3' STO
                    x y + z + ci + 10 / IP DUP 'ci' STO
                    'c' i ROT PUT
                NEXT
            END
            'p1' m 0 PUT
            d m GET z - ci - 10 MOD DUP 'y' STO
            'p2' m ROT PUT
            @ Adjust if the carry in m is 0 or 2
            y z + ci + 10 / IP 'ci' STO
            IF ci 0 == THEN
                IF y 0 \=/ THEN                   @ II.2.i
                    p1 m 1 PUT m 1 + 1 PUT 'p1' STO
                    'p2' m y 1 - PUT
                ELSE
                    p2 m 1 - GET 'y' STO
                    IF y 0 \=/ THEN                  @ II.2.ii.a
                        p1 m 1 PUT m 1 + 1 PUT 'p1' STO
                        'y' DECR DUP
                        p2 m 1 - ROT PUT m 8 PUT m 1 + ROT PUT 'p2' STO
                        p3 m 1 - GET 1 + DUP
                        p3 m ROT PUT m 1 - ROT PUT 'p3' STO
                    ELSE
                        IF z 0 \=/ THEN               @ II.2.ii.b
                            p2 m 1 + 1 PUT m 1 PUT m 1 - 1 PUT 'p2' STO
                            p3 m 1 - GET 1 - DUP
                            p3 m ROT PUT m 1 - ROT PUT 'p3' STO
                        ELSE                          @ II.2.ii.c
                            IF c m 1 - GET 0 \=/ THEN  @ normal case
                                p1 m 1 - GET 1 - DUP
                                p1 m 1 - ROT PUT m 2 + ROT PUT m 1 PUT m 1 + 1 PUT 'p1' STO
                                p2 m 1 - 9 PUT m 6 PUT m 1 + 9 PUT 'p2' STO
                                p3 m 2 PUT m 1 - 2 PUT 'p3' STO
                            ELSE                    @ Called from SML6
                                CASE
                                  p1 2 GET 0 \=/ THEN
                                    p1 2 GET 1 - DUP
                                    p1 2 ROT PUT 5 ROT PUT 3 9 PUT 4 9 PUT 'p1' STO
                                    p2 2 1 PUT 3 1 PUT 4 1 PUT 'p2' STO
                                    p3 2 0 PUT 3 0 PUT 'p3' STO
                                  END
                                  p1 1 GET 1 == THEN
                                    { 2 0 0 0 0 2 } 'p1' STO
                                    { 1 1 } 'p2' STO
                                    { 6 } 'p3' STO
                                  END
                                  p2 1 GET 9 \=/ THEN
                                    p1 1 GET 1 - DUP
                                    p1 1 ROT PUT 6 ROT PUT 2 9 PUT 5 9 PUT 'p1' STO
                                    p2 1 GET 1 + DUP
                                    p2 1 ROT PUT 5 ROT PUT 3 8 PUT 'p2' STO
                                    p3 2 1 PUT 3 1 PUT 'p3' STO
                                  END
                                  p1 1 GET 1 + DUP
                                  p1 1 ROT PUT 6 ROT PUT 'p1' STO
                                  { 1 1 } 'p2' STO
                                  { 6 } 'p3' STO
                                END
                            END
                        END
                    END
                END
            ELSE IF ci 2 == THEN                     @ II.3
                p1 m 1 + 1 PUT m 1 PUT 'p1' STO
                p2 m 1 - GET 1 - DUP
                p2 m 1 - ROT PUT m 1 + ROT PUT m 8 PUT 'p2' STO
                p3 m 0 PUT m 1 - 0 PUT 'p3' STO
            END END
            p1 NL\->I p2 NL\->I p3 NL\->I
        \>>
    \>>
\>>
'ALGO2' STO
